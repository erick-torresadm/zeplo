Planejamento do SaaS de Fluxos de Mensagens no WhatsApp (Evolution API v2)
Vis√£o Geral
Este SaaS permitir√° que os usu√°rios criem fluxos automatizados de mensagens no WhatsApp com base em palavras-chave. O sistema se conectar√° √† Evolution API v2 para gerenciar inst√¢ncias de WhatsApp e enviar√° mensagens com intervalos configur√°veis. O dashboard permitir√° aos usu√°rios configurar suas inst√¢ncias e criar fluxos personalizados.

1. Arquitetura do Sistema
1.1. Tecnologias e Estrutura
Frontend: Dashboard para gerenciamento das inst√¢ncias e fluxos de mensagens.

Backend: API intermedi√°ria para comunica√ß√£o com a Evolution API e banco de dados.

Banco de Dados: Armazena informa√ß√µes sobre inst√¢ncias registradas por cada usu√°rio e os fluxos de mensagens.

Webhooks/Polling: Para monitoramento de mensagens recebidas e execu√ß√£o dos fluxos.

1.2. Fluxo Geral do Usu√°rio
Usu√°rio se cadastra/loga no sistema.

Conecta-se √† Evolution API criando uma nova inst√¢ncia de WhatsApp.

Configura palavras-chave e mensagens autom√°ticas no fluxo de mensagens.

Ao receber uma mensagem com a palavra-chave, o sistema responde automaticamente.

Logs e relat√≥rios s√£o armazenados e exibidos no dashboard.

2. Funcionalidades e Telas
2.1. Tela de Conex√£o WhatsApp
Objetivo:
Permitir que o usu√°rio registre e gerencie sua inst√¢ncia do WhatsApp na Evolution API.

Funcionalidades:
Listagem das inst√¢ncias criadas pelo usu√°rio (busca via API).

Bot√£o ‚ÄúNova Conex√£o‚Äù para criar uma nova inst√¢ncia.

Exibi√ß√£o do QR Code para conectar o WhatsApp.

Status da conex√£o (Online, Offline, Desconectado).

Fluxo da Tela:
O sistema busca somente as inst√¢ncias do usu√°rio logado na Evolution API.

O usu√°rio pode clicar em ‚ÄúNova Conex√£o‚Äù e fornecer um nome.

O sistema faz uma requisi√ß√£o para criar uma inst√¢ncia e retorna os dados.

O usu√°rio escaneia o QR Code e o sistema atualiza o status da inst√¢ncia.

Se a conex√£o for bem-sucedida, a inst√¢ncia fica dispon√≠vel para configura√ß√£o de fluxos.

Endpoints Utilizados:
Criar inst√¢ncia:

bash
Copiar
Editar
curl --request POST \
  --url https://api.membropro.com.br/instance/create \
  --header 'Content-Type: application/json' \
  --header 'apikey: SEU_API_KEY' \
  --data '{
    "instanceName": "nomedoinstancia",
    "integration": "WHATSAPP-BAILEYS"
  }'
Buscar inst√¢ncias do usu√°rio:

bash
Copiar
Editar
curl --request GET \
  --url 'https://api.membropro.com.br/instance/fetchInstances?instanceName=nomedoinstancia' \
  --header 'apikey: SEU_API_KEY'
Conectar inst√¢ncia (QR Code em Base64):

bash
Copiar
Editar
curl --request GET \
  --url https://api.membropro.com.br/instance/connect/nomedoinstancia \
  --header 'apikey: SEU_API_KEY'
2.2. Tela de Cria√ß√£o de Fluxos de Mensagens
Objetivo:
Permitir que os usu√°rios configurem palavras-chave e as mensagens autom√°ticas que ser√£o enviadas.

Funcionalidades:
Definir palavra-chave que ativar√° o fluxo.

Criar sequ√™ncia de mensagens (exemplo: Mensagem 1 ‚Üí Espera 5s ‚Üí Mensagem 2).

Escolher a inst√¢ncia do WhatsApp associada ao fluxo.

Ativar/desativar fluxo.

Fluxo da Tela:
O usu√°rio escolhe uma inst√¢ncia ativa.

Insere a palavra-chave que ativar√° o fluxo.

Adiciona mensagens com tempos entre elas.

Salva e ativa o fluxo.

Exemplo de Configura√ß√£o de Fluxo:
Palavra-chave: "Promo√ß√£o"

Mensagem 1: "Ol√°! Temos uma promo√ß√£o especial para voc√™." (Enviada imediatamente)

Tempo: 5 segundos

Mensagem 2: "Use o cupom DESCONTO10 para ganhar 10% de desconto!"

Estrutura no Banco de Dados:
json
Copiar
Editar
{
  "id": "fluxo_001",
  "user_id": "usuario_123",
  "instance_id": "e246c9c5-8520-4ff1-aa2d-2dc2b70d9d45",
  "keyword": "Promo√ß√£o",
  "messages": [
    {
      "text": "Ol√°! Temos uma promo√ß√£o especial para voc√™.",
      "delay": 0
    },
    {
      "text": "Use o cupom DESCONTO10 para ganhar 10% de desconto!",
      "delay": 5
    }
  ],
  "status": "active"
}
2.3. Monitoramento e Execu√ß√£o dos Fluxos
Objetivo:
Detectar mensagens recebidas e responder automaticamente.

Funcionamento:
O sistema consulta periodicamente as mensagens recebidas.

Se houver uma correspond√™ncia com uma palavra-chave, o fluxo √© ativado.

As mensagens s√£o enviadas na ordem definida, respeitando os tempos configurados.

Implementa√ß√£o do Polling (Consultando mensagens recebidas):
bash
Copiar
Editar
curl --request GET \
  --url 'https://api.membropro.com.br/instance/messages?instanceId=INSTANCE_ID' \
  --header 'apikey: SEU_API_KEY'
Resposta esperada:

json
Copiar
Editar
[
  {
    "messageId": "msg_001",
    "from": "5511999999999",
    "message": "Promo√ß√£o"
  }
]
Caso uma mensagem contenha uma palavra-chave configurada, o sistema responder√° automaticamente.

3. Banco de Dados
3.1. Tabela de Usu√°rios
Armazena os usu√°rios cadastrados.

sql
Copiar
Editar
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255) UNIQUE,
  password_hash TEXT
);
3.2. Tabela de Inst√¢ncias
Vincula as inst√¢ncias ao usu√°rio.

sql
Copiar
Editar
CREATE TABLE instances (
  id UUID PRIMARY KEY,
  user_id INT REFERENCES users(id),
  name VARCHAR(255),
  status VARCHAR(50)
);
3.3. Tabela de Fluxos de Mensagens
Guarda os fluxos de mensagens configurados.

sql
Copiar
Editar
CREATE TABLE message_flows (
  id UUID PRIMARY KEY,
  user_id INT REFERENCES users(id),
  instance_id UUID REFERENCES instances(id),
  keyword VARCHAR(255),
  messages JSONB,
  status VARCHAR(50)
);
4. Conclus√£o e Pr√≥ximos Passos
MVP (Produto M√≠nimo Vi√°vel)
Criar a tela de conex√£o com o WhatsApp.

Criar a tela de configura√ß√£o de fluxos.

Implementar execu√ß√£o autom√°tica dos fluxos.

Futuras Melhorias
Relat√≥rios detalhados de mensagens enviadas.

Suporte para m√≠dia (√°udios, imagens, v√≠deos).

Integra√ß√£o com CRM e chatbots avan√ßados.

Este √© um plano s√≥lido para iniciar o desenvolvimento do SaaS de automa√ß√£o de WhatsApp com Evolution API v2. üöÄ